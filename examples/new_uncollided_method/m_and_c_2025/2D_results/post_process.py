import numpy as np
import pandas as pd
import imageio.v3 as iio
from pathlib import Path
from matplotlib import pyplot as plt

GIFS = False

SIZE_2D_W = 10
SIZE_2D_H = 6

SIZE_3D_W = 10
SIZE_3D_H = 10

# The number of refinement steps; 30 was overkill.
CYCLES = np.linspace(0, 29, 30)

ERROR_F_NAMES =  ['error.0001.png', 'error.0002.png', 'error.0003.png', 'error.0004.png', 'error.0005.png',
                  'error.0006.png', 'error.0007.png', 'error.0008.png', 'error.0009.png', 'error.0010.png',
                  'error.0011.png', 'error.0012.png', 'error.0013.png', 'error.0014.png', 'error.0015.png',
                  'error.0016.png', 'error.0017.png', 'error.0018.png', 'error.0019.png', 'error.0020.png',
                  'error.0021.png', 'error.0022.png', 'error.0023.png', 'error.0024.png', 'error.0025.png',
                  'error.0026.png', 'error.0027.png', 'error.0028.png', 'error.0029.png', 'error.0030.png']
REFINE_F_NAMES = ['refinement.0001.png', 'refinement.0002.png', 'refinement.0003.png', 'refinement.0004.png', 'refinement.0005.png',
                  'refinement.0006.png', 'refinement.0007.png', 'refinement.0008.png', 'refinement.0009.png', 'refinement.0010.png',
                  'refinement.0011.png', 'refinement.0012.png', 'refinement.0013.png', 'refinement.0014.png', 'refinement.0015.png',
                  'refinement.0016.png', 'refinement.0017.png', 'refinement.0018.png', 'refinement.0019.png', 'refinement.0020.png',
                  'refinement.0021.png', 'refinement.0022.png', 'refinement.0023.png', 'refinement.0024.png', 'refinement.0025.png',
                  'refinement.0026.png', 'refinement.0027.png', 'refinement.0028.png', 'refinement.0029.png', 'refinement.0030.png']

#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
# Plot the data generated by uniform refinement.
def plot_uniform_data_2D(sigma_t_dir):
  elem_uni = []
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_1.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_2.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_3.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_4.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_5.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_6.csv')['Num_Elements'].to_numpy()[1])
  elem_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/elem_7.csv')['Num_Elements'].to_numpy()[1])

  max_rel_uni = []
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_1.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_2.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_3.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_4.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_5.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_6.csv')['Max_Rel_Error'].to_numpy()[1])
  max_rel_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_7.csv')['Max_Rel_Error'].to_numpy()[1])

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(elem_uni, max_rel_uni)
  plt.yscale('log')
  plt.xlabel('Number of Elements')
  plt.ylabel('Maximum Relative Error')
  plt.grid(True)

  plt.savefig('2D_figures/uniform/' + sigma_t_dir + '_max_rel_error.png')
  plt.close()

  rel_L2_uni = []
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_1.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_2.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_3.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_4.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_5.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_6.csv')['Rel_Error_L2_Norm'].to_numpy()[1])
  rel_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_7.csv')['Rel_Error_L2_Norm'].to_numpy()[1])

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(elem_uni, max_rel_uni)
  plt.yscale('log')
  plt.xlabel('Number of Elements')
  plt.ylabel('L2 Relative Error')
  plt.grid(True)

  plt.savefig('2D_figures/uniform/' + sigma_t_dir + '_l2_rel_error.png')
  plt.close()

  abs_L2_uni = []
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_1.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_2.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_3.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_4.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_5.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_6.csv')['Abs_Error_L2_Norm'].to_numpy()[1])
  abs_L2_uni.append(pd.read_csv('./uniform/' + sigma_t_dir + '/errors_7.csv')['Abs_Error_L2_Norm'].to_numpy()[1])

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(elem_uni, max_rel_uni)
  plt.yscale('log')
  plt.xlabel('Number of Elements')
  plt.ylabel('L2 Error')
  plt.grid(True)

  plt.savefig('2D_figures/uniform/' + sigma_t_dir + '_l2_abs_error.png')
  plt.close()

# Plot 2D data over the number of refinement cycles for each refinement criteria.
def plot_data_2D(data_dir):
  grad_jump_df          = pd.read_csv('./' + data_dir + '/grad_jump_error/main_out.csv')
  streaming_jump_df     = pd.read_csv('./' + data_dir + '/streaming_jump_error/main_out.csv')
  conservation_jump_df  = pd.read_csv('./' + data_dir + '/cons_jump_error/main_out.csv')
  transverse_jump_df    = pd.read_csv('./' + data_dir + '/transverse_jump_error/main_out.csv')

  abs_L2_grad           = np.delete(grad_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
  abs_L2_streaming      = np.delete(streaming_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
  abs_L2_conservation   = np.delete(conservation_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
  abs_L2_transverse     = np.delete(transverse_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])

  rel_L2_grad           = np.delete(grad_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
  rel_L2_streaming      = np.delete(streaming_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
  rel_L2_conservation   = np.delete(conservation_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
  rel_L2_transverse     = np.delete(transverse_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])

  max_rel_grad          = np.delete(grad_jump_df['Max_Rel_Error'].to_numpy(), [0])
  max_rel_streaming     = np.delete(streaming_jump_df['Max_Rel_Error'].to_numpy(), [0])
  max_rel_conservation  = np.delete(conservation_jump_df['Max_Rel_Error'].to_numpy(), [0])
  max_rel_transverse    = np.delete(transverse_jump_df['Max_Rel_Error'].to_numpy(), [0])

  elements_grad         = np.delete(pd.read_csv('./' + data_dir + '/grad_jump_error/main_out_SASF0.csv')['Num_Elements'].to_numpy(), [0])
  elements_streaming    = np.delete(pd.read_csv('./' + data_dir + '/streaming_jump_error/main_out_SASF0.csv')['Num_Elements'].to_numpy(), [0])
  elements_conservation = np.delete(pd.read_csv('./' + data_dir + '/cons_jump_error/main_out_SASF0.csv')['Num_Elements'].to_numpy(), [0])
  elements_transverse   = np.delete(pd.read_csv('./' + data_dir + '/transverse_jump_error/main_out_SASF0.csv')['Num_Elements'].to_numpy(), [0])

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(CYCLES, abs_L2_grad, label = 'Gradient Jump')
  plt.plot(CYCLES, abs_L2_streaming, label = 'Streaming Jump')
  plt.plot(CYCLES, abs_L2_conservation, label = 'Conservation Jump')
  plt.plot(CYCLES, abs_L2_transverse, label = 'Transverse Jump')
  plt.yscale('log')
  plt.xlabel('Number of Cycles')
  plt.ylabel('L2 Error')
  plt.legend()
  plt.grid(True)

  plt.savefig('2D_figures/' + data_dir + '/abs_l2_error_over_cycles.png')
  plt.close()

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(CYCLES, rel_L2_grad, label = 'Gradient Jump')
  plt.plot(CYCLES, rel_L2_streaming, label = 'Streaming Jump')
  plt.plot(CYCLES, rel_L2_conservation, label = 'Conservation Jump')
  plt.plot(CYCLES, rel_L2_transverse, label = 'Transverse Jump')
  plt.yscale('log')
  plt.xlabel('Number of Cycles')
  plt.ylabel('L2 Relative Error')
  plt.legend()
  plt.grid(True)

  plt.savefig('2D_figures/' + data_dir + '/rel_l2_error_over_cycles.png')
  plt.close()

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(CYCLES, max_rel_grad, label = 'Gradient Jump')
  plt.plot(CYCLES, max_rel_streaming, label = 'Streaming Jump')
  plt.plot(CYCLES, max_rel_conservation, label = 'Conservation Jump')
  plt.plot(CYCLES, max_rel_transverse, label = 'Transverse Jump')
  plt.yscale('log')
  plt.xlabel('Number of Cycles')
  plt.ylabel('Maximum Relative Error')
  plt.legend()
  plt.grid(True)

  plt.savefig('2D_figures/' + data_dir + '/max_rel_error_over_cycles.png')
  plt.close()

  plt.figure(figsize=(SIZE_2D_W,SIZE_2D_H))
  plt.plot(CYCLES, elements_grad, label = 'Gradient Jump')
  plt.plot(CYCLES, elements_streaming, label = 'Streaming Jump')
  plt.plot(CYCLES, elements_conservation, label = 'Conservation Jump')
  plt.plot(CYCLES, elements_transverse, label = 'Transverse Jump')
  plt.yscale('log')
  plt.xlabel('Number of Cycles')
  plt.ylabel('Number of Active Elements')
  plt.legend()
  plt.grid(True)

  plt.savefig('2D_figures/' + data_dir + '/num_elements.png')
  plt.close()

# Generate gifs of the refinement sequence.
def plot_data_gif(base_dir, f_names):
  err_images = []
  for file in f_names:
    err_images.append(iio.imread('./' + base_dir + '/'+ file))
  iio.imwrite('./2D_gifs/error_' + base_dir.replace('/', '_') + '.gif', err_images, fps = 5, loop = 0)

# Plot the error metrics as a function of refinement criteria and the number of cycles in a 3D plot.
def plot_data_3D(directories, refinements):
  ax_abs_L2  = plt.figure(figsize=(SIZE_3D_W,SIZE_3D_H)).add_subplot(projection='3d')
  ax_rel_L2  = plt.figure(figsize=(SIZE_3D_W,SIZE_3D_H)).add_subplot(projection='3d')
  ax_max_rel = plt.figure(figsize=(SIZE_3D_W,SIZE_3D_H)).add_subplot(projection='3d')

  first = True

  lb = ''
  for i in range(len(directories)):
    data_dir = directories[i]
    ref      = refinements[i]

    grad_jump_df          = pd.read_csv('./' + data_dir + '/grad_jump_error/main_out.csv')
    streaming_jump_df     = pd.read_csv('./' + data_dir + '/streaming_jump_error/main_out.csv')
    conservation_jump_df  = pd.read_csv('./' + data_dir + '/cons_jump_error/main_out.csv')
    transverse_jump_df    = pd.read_csv('./' + data_dir + '/transverse_jump_error/main_out.csv')

    abs_L2_grad           = np.delete(grad_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
    abs_L2_streaming      = np.delete(streaming_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
    abs_L2_conservation   = np.delete(conservation_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])
    abs_L2_transverse     = np.delete(transverse_jump_df['Abs_Error_L2_Norm'].to_numpy(), [0])

    rel_L2_grad           = np.delete(grad_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
    rel_L2_streaming      = np.delete(streaming_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
    rel_L2_conservation   = np.delete(conservation_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])
    rel_L2_transverse     = np.delete(transverse_jump_df['Rel_Error_L2_Norm'].to_numpy(), [0])

    max_rel_grad          = np.delete(grad_jump_df['Max_Rel_Error'].to_numpy(), [0])
    max_rel_streaming     = np.delete(streaming_jump_df['Max_Rel_Error'].to_numpy(), [0])
    max_rel_conservation  = np.delete(conservation_jump_df['Max_Rel_Error'].to_numpy(), [0])
    max_rel_transverse    = np.delete(transverse_jump_df['Max_Rel_Error'].to_numpy(), [0])

    ax_abs_L2.plot(CYCLES, abs_L2_grad,         zs = ref, zdir='x', c = 'r', label = lb + 'Gradient Jump')
    ax_abs_L2.plot(CYCLES, abs_L2_streaming,    zs = ref, zdir='x', c = 'g', label = lb + 'Streaming Jump')
    ax_abs_L2.plot(CYCLES, abs_L2_conservation, zs = ref, zdir='x', c = 'b', label = lb + 'Conservation Jump')
    ax_abs_L2.plot(CYCLES, abs_L2_transverse, zs = ref, zdir='x', c = 'y', label = lb + 'Transverse Jump')

    ax_rel_L2.plot(CYCLES, rel_L2_grad,         zs = ref, zdir='x', c = 'r', label = lb + 'Gradient Jump')
    ax_rel_L2.plot(CYCLES, rel_L2_streaming,    zs = ref, zdir='x', c = 'g', label = lb + 'Streaming Jump')
    ax_rel_L2.plot(CYCLES, rel_L2_conservation, zs = ref, zdir='x', c = 'b', label = lb + 'Conservation Jump')
    ax_rel_L2.plot(CYCLES, rel_L2_transverse, zs = ref, zdir='x', c = 'y', label = lb + 'Transverse Jump')

    ax_max_rel.plot(CYCLES, max_rel_grad,         zs = ref, zdir='x', c = 'r', label = lb + 'Gradient Jump')
    ax_max_rel.plot(CYCLES, max_rel_streaming,    zs = ref, zdir='x', c = 'g', label = lb + 'Streaming Jump')
    ax_max_rel.plot(CYCLES, max_rel_conservation, zs = ref, zdir='x', c = 'b', label = lb + 'Conservation Jump')
    ax_max_rel.plot(CYCLES, max_rel_transverse, zs = ref, zdir='x', c = 'y', label = lb + 'Transverse Jump')

    if first:
      first = False
      lb = '_'

  ax_abs_L2.legend()
  ax_rel_L2.legend()
  ax_max_rel.legend()

  # Log plotting for 3D plots is unfortunately broken in Matplotlib...
  #ax_abs_L2.zaxis._set_scale('log')
  #ax_rel_L2.zaxis._set_scale('log')
  #ax_max_rel.zaxis._set_scale('log')

  ax_abs_L2.set_xlabel('Refinement Threshold')
  ax_abs_L2.set_ylabel('Number of Cycles')
  ax_abs_L2.set_zlabel('L2 Error')

  ax_rel_L2.set_xlabel('Refinement Threshold')
  ax_rel_L2.set_ylabel('Number of Cycles')
  ax_rel_L2.set_zlabel('L2 Relative Error')

  ax_max_rel.set_xlabel('Refinement Threshold')
  ax_max_rel.set_ylabel('Number of Cycles')
  ax_max_rel.set_zlabel('Maximum Relative Error')

  ax_abs_L2.view_init(elev = 20.0,  azim = 45.0, roll = 0.0)
  ax_rel_L2.view_init(elev = 20.0,  azim = 45.0, roll = 0.0)
  ax_max_rel.view_init(elev = 20.0, azim = 45.0, roll = 0.0)

  ax_abs_L2.figure.savefig('3D_figures/' + directories[0] + '/abs_l2_error.png')
  ax_rel_L2.figure.savefig('3D_figures/' + directories[0] + '/rel_l2_error.png')
  ax_max_rel.figure.savefig('3D_figures/' + directories[0] + '/max_rel_error.png')
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------

# Plot the uniform refinement results.
plot_uniform_data_2D('sigma_t_1')
plot_uniform_data_2D('sigma_t_10')

# Plot the 3D results
directories_sigma_t_1 =  ['amr_sigma_t_1/refine_0_1',
                          'amr_sigma_t_1/refine_0_2',
                          'amr_sigma_t_1/refine_0_3',
                          'amr_sigma_t_1/refine_0_4',
                          'amr_sigma_t_1/refine_0_5']
directories_sigma_t_10 = ['amr_sigma_t_10/refine_0_1',
                          'amr_sigma_t_10/refine_0_2',
                          'amr_sigma_t_10/refine_0_3',
                          'amr_sigma_t_10/refine_0_4',
                          'amr_sigma_t_10/refine_0_5']
refinements = [0.1,          0.2,          0.3,          0.4,          0.5]
plot_data_3D(directories_sigma_t_1, refinements)
plot_data_3D(directories_sigma_t_10, refinements)

# Plot the gif results.
gif_sources_e_sigma_t_1 = ['amr_sigma_t_1/refine_0_1/cons_jump_error/lin',
                           'amr_sigma_t_1/refine_0_1/grad_jump_error/lin',
                           'amr_sigma_t_1/refine_0_1/streaming_jump_error/lin',
                           'amr_sigma_t_1/refine_0_2/cons_jump_error/lin',
                           'amr_sigma_t_1/refine_0_2/grad_jump_error/lin',
                           'amr_sigma_t_1/refine_0_2/streaming_jump_error/lin',
                           'amr_sigma_t_1/refine_0_3/cons_jump_error/lin',
                           'amr_sigma_t_1/refine_0_3/grad_jump_error/lin',
                           'amr_sigma_t_1/refine_0_3/streaming_jump_error/lin',
                           'amr_sigma_t_1/refine_0_4/cons_jump_error/lin',
                           'amr_sigma_t_1/refine_0_4/grad_jump_error/lin',
                           'amr_sigma_t_1/refine_0_4/streaming_jump_error/lin',
                           'amr_sigma_t_1/refine_0_5/cons_jump_error/lin',
                           'amr_sigma_t_1/refine_0_5/grad_jump_error/lin',
                           'amr_sigma_t_1/refine_0_5/streaming_jump_error/lin']
gif_sources_r_sigma_t_1 = ['amr_sigma_t_1/refine_0_1/cons_jump_ref',
                           'amr_sigma_t_1/refine_0_1/grad_jump_ref',
                           'amr_sigma_t_1/refine_0_1/streaming_jump_ref',
                           'amr_sigma_t_1/refine_0_2/cons_jump_ref',
                           'amr_sigma_t_1/refine_0_2/grad_jump_ref',
                           'amr_sigma_t_1/refine_0_2/streaming_jump_ref',
                           'amr_sigma_t_1/refine_0_3/cons_jump_ref',
                           'amr_sigma_t_1/refine_0_3/grad_jump_ref',
                           'amr_sigma_t_1/refine_0_3/streaming_jump_ref',
                           'amr_sigma_t_1/refine_0_4/cons_jump_ref',
                           'amr_sigma_t_1/refine_0_4/grad_jump_ref',
                           'amr_sigma_t_1/refine_0_4/streaming_jump_ref',
                           'amr_sigma_t_1/refine_0_5/cons_jump_ref',
                           'amr_sigma_t_1/refine_0_5/grad_jump_ref',
                           'amr_sigma_t_1/refine_0_5/streaming_jump_ref']

gif_sources_e_sigma_t_10 = ['amr_sigma_t_10/refine_0_1/cons_jump_error/lin',
                            'amr_sigma_t_10/refine_0_1/grad_jump_error/lin',
                            'amr_sigma_t_10/refine_0_1/streaming_jump_error/lin',
                            'amr_sigma_t_10/refine_0_2/cons_jump_error/lin',
                            'amr_sigma_t_10/refine_0_2/grad_jump_error/lin',
                            'amr_sigma_t_10/refine_0_2/streaming_jump_error/lin',
                            'amr_sigma_t_10/refine_0_3/cons_jump_error/lin',
                            'amr_sigma_t_10/refine_0_3/grad_jump_error/lin',
                            'amr_sigma_t_10/refine_0_3/streaming_jump_error/lin',
                            'amr_sigma_t_10/refine_0_4/cons_jump_error/lin',
                            'amr_sigma_t_10/refine_0_4/grad_jump_error/lin',
                            'amr_sigma_t_10/refine_0_4/streaming_jump_error/lin',
                            'amr_sigma_t_10/refine_0_5/cons_jump_error/lin',
                            'amr_sigma_t_10/refine_0_5/grad_jump_error/lin',
                            'amr_sigma_t_10/refine_0_5/streaming_jump_error/lin']
gif_sources_r_sigma_t_10 = ['amr_sigma_t_10/refine_0_1/cons_jump_ref/log',
                            'amr_sigma_t_10/refine_0_1/grad_jump_ref/log',
                            'amr_sigma_t_10/refine_0_1/streaming_jump_ref/log',
                            'amr_sigma_t_10/refine_0_2/cons_jump_ref/log',
                            'amr_sigma_t_10/refine_0_2/grad_jump_ref/log',
                            'amr_sigma_t_10/refine_0_2/streaming_jump_ref/log',
                            'amr_sigma_t_10/refine_0_3/cons_jump_ref/log',
                            'amr_sigma_t_10/refine_0_3/grad_jump_ref/log',
                            'amr_sigma_t_10/refine_0_3/streaming_jump_ref/log',
                            'amr_sigma_t_10/refine_0_4/cons_jump_ref/log',
                            'amr_sigma_t_10/refine_0_4/grad_jump_ref/log',
                            'amr_sigma_t_10/refine_0_4/streaming_jump_ref/log',
                            'amr_sigma_t_10/refine_0_5/cons_jump_ref/log',
                            'amr_sigma_t_10/refine_0_5/grad_jump_ref/log',
                            'amr_sigma_t_10/refine_0_5/streaming_jump_ref/log']

if GIFS:
  for gifs in gif_sources_e_sigma_t_1:
    plot_data_gif(gifs, ERROR_F_NAMES)
  for gifs in gif_sources_r_sigma_t_1:
    plot_data_gif(gifs, REFINE_F_NAMES)

  for gifs in gif_sources_e_sigma_t_10:
    plot_data_gif(gifs, ERROR_F_NAMES)
  for gifs in gif_sources_r_sigma_t_10:
    plot_data_gif(gifs, REFINE_F_NAMES)

# Plot the 2D results.
for dir in directories_sigma_t_1:
  plot_data_2D(dir)
for dir in directories_sigma_t_10:
  plot_data_2D(dir)
